# Project structure generator that creates a formatted text file
# Copy this code and run: python -c "exec(open('temp_structure.py').read())"
# Or just run it directly in Python REPL

from pathlib import Path
from datetime import datetime


def generate_tree(
    directory=".", prefix="", ignore_patterns=None, max_depth=5, current_depth=0
):
    """Generate tree structure as a list of strings"""
    if ignore_patterns is None:
        ignore_patterns = [
            ".git",
            "__pycache__",
            ".idea",
            ".vscode",
            "node_modules",
            ".env",
            ".venv",
            "venv",
        ]

    if current_depth >= max_depth:
        return []

    directory = Path(directory)
    tree_lines = []

    try:
        items = [
            item
            for item in directory.iterdir()
            if not any(pattern in item.name for pattern in ignore_patterns)
        ]
        items = sorted(items, key=lambda x: (x.is_file(), x.name.lower()))
    except PermissionError:
        tree_lines.append(f"{prefix}[Permission Denied]")
        return tree_lines

    for i, item in enumerate(items):
        is_last = i == len(items) - 1
        current_prefix = "└── " if is_last else "├── "

        # Add folder emoji for directories, file emoji for files
        if item.is_dir():
            item_display = f"📁 {item.name}"
        else:
            item_display = f"📄 {item.name}"

        tree_lines.append(f"{prefix}{current_prefix}{item_display}")

        if item.is_dir():
            extension_prefix = "    " if is_last else "│   "
            subtree = generate_tree(
                item,
                prefix + extension_prefix,
                ignore_patterns,
                max_depth,
                current_depth + 1,
            )
            tree_lines.extend(subtree)

    return tree_lines


def create_structure_file(
    target_directory=".", output_filename="project_structure.txt", max_depth=5
):
    """Create a formatted text file with the project structure"""

    # Generate the tree structure
    tree_lines = generate_tree(target_directory, max_depth=max_depth)

    # Get project name from directory
    project_path = Path(target_directory).resolve()
    project_name = project_path.name

    # Create the formatted content
    content_lines = [
        "PROJECT STRUCTURE",
        "=" * 50,
        f"Project: {project_name}",
        f"Location: {project_path}",
        f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
        f"Max Depth: {max_depth}",
        "",
        f"📁 {project_name}/",
    ]

    # Add the tree structure
    content_lines.extend(tree_lines)

    # Add footer
    content_lines.extend(
        [
            "",
            "=" * 50,
            f"Total items displayed: {len(tree_lines)}",
            "Generated by Project Structure Generator",
        ]
    )

    # Write to file
    output_path = Path(output_filename)
    with open(output_path, "w", encoding="utf-8") as f:
        f.write("\n".join(content_lines))

    return output_path


# Main execution
if __name__ == "__main__":
    # Configuration
    TARGET_DIR = "."  # Change this to any directory path you want
    OUTPUT_FILE = "project_structure.txt"
    MAX_DEPTH = 5

    print("Generating project structure...")

    # Display on console
    print("\nPROJECT STRUCTURE")
    print("=" * 50)
    tree_lines = generate_tree(TARGET_DIR, max_depth=MAX_DEPTH)
    for line in tree_lines:
        print(line)

    # Create the text file
    output_path = create_structure_file(TARGET_DIR, OUTPUT_FILE, MAX_DEPTH)

    print(f"\n✅ Project structure saved to: {output_path.absolute()}")
    print(f"📁 File size: {output_path.stat().st_size} bytes")

    # Optional: Open the file (uncomment if you want to auto-open)
    # import subprocess
    # import sys
    # if sys.platform == "win32":
    #     os.startfile(output_path)
    # elif sys.platform == "darwin":
    #     subprocess.run(["open", output_path])
    # else:
    #     subprocess.run(["xdg-open", output_path])


# Alternative: Quick run function
def quick_generate(path=".", filename="structure.txt", depth=5):
    """Quick function to generate structure file"""
    return create_structure_file(path, filename, depth)


# Example usage:
# quick_generate("./my_project", "my_project_structure.txt", 3)
