"""
MarketPulse Database Models - SQLite Compatible
SQLAlchemy ORM Models for Financial Trading Data (SQLite/PostgreSQL Compatible)

Location: #06_DATA/database/models_sqlite.py
"""

from datetime import datetime
from typing import Optional
from sqlalchemy import (
    Column, Integer, Float, String, DateTime, Boolean,
    Text, ForeignKey, Index, UniqueConstraint, CheckConstraint
)
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
import uuid
import json

from .db_setup import Base


class MarketData(Base):
    """
    Time-series market data (OHLCV + technical indicators)
    """

    __tablename__ = 'market_data'

    # Primary key and identifiers
    id = Column(Integer, primary_key=True, autoincrement=True)
    symbol = Column(String(20), nullable=False, index=True)
    timestamp = Column(DateTime, nullable=False, index=True)
    timeframe = Column(String(10), nullable=False)  # 1m, 5m, 1h, 1d, etc.

    # OHLCV data
    open_price = Column(Float, nullable=False)
    high_price = Column(Float, nullable=False)
    low_price = Column(Float, nullable=False)
    close_price = Column(Float, nullable=False)
    volume = Column(Integer, nullable=False)

    # Additional market data
    vwap = Column(Float)  # Volume Weighted Average Price
    trades_count = Column(Integer)  # Number of trades in period

    # Data quality indicators
    data_source = Column(String(50), nullable=False)  # yfinance, kite, etc.
    quality_score = Column(Float, default=1.0)  # 0.0 to 1.0

    # Timestamps
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())

    # Indexes for performance
    __table_args__ = (
        Index('idx_market_data_symbol_timestamp', 'symbol', 'timestamp'),
        Index('idx_market_data_timeframe', 'timeframe'),
        UniqueConstraint('symbol', 'timestamp', 'timeframe', name='unique_market_data')
    )


class Trade(Base):
    """
    Trading records - every trade executed by the system
    """

    __tablename__ = 'trades'

    # Primary key
    trade_id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))

    # Trade identification
    symbol = Column(String(20), nullable=False, index=True)
    strategy = Column(String(50), nullable=False)  # momentum, mean_reversion, etc.
    signal_id = Column(String(36), ForeignKey('signals.signal_id'))

    # Trade details
    action = Column(String(10), nullable=False)  # BUY, SELL
    quantity = Column(Integer, nullable=False)
    entry_price = Column(Float, nullable=False)
    exit_price = Column(Float)

    # Trade status
    status = Column(String(20), nullable=False, default='ACTIVE')  # ACTIVE, CLOSED, CANCELLED
    trade_type = Column(String(20), nullable=False)  # MARKET, LIMIT, STOP

    # Risk management
    stop_loss_price = Column(Float)
    profit_target_price = Column(Float)
    risk_amount = Column(Float)  # Maximum loss amount

    # Financial results
    gross_pnl = Column(Float, default=0.0)  # P&L before costs
    commission = Column(Float, default=0.0)
    slippage = Column(Float, default=0.0)
    net_pnl = Column(Float, default=0.0)  # P&L after all costs

    # Performance metrics
    return_pct = Column(Float, default=0.0)  # Return percentage
    holding_period_minutes = Column(Integer)  # How long trade was held

    # ML and confidence data
    ml_confidence = Column(Float)  # ML model confidence (0.0 to 1.0)
    ml_predicted_return = Column(Float)  # ML predicted return
    ml_actual_vs_predicted = Column(Float)  # Actual vs predicted performance

    # Timestamps
    entry_timestamp = Column(DateTime, nullable=False, default=func.now())
    exit_timestamp = Column(DateTime)
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())

    # Relationships
    signal = relationship("Signal", back_populates="trades")

    # Constraints and indexes
    __table_args__ = (
        CheckConstraint('action IN (\'BUY\', \'SELL\')', name='check_trade_action'),
        CheckConstraint('status IN (\'ACTIVE\', \'CLOSED\', \'CANCELLED\')', name='check_trade_status'),
        CheckConstraint('quantity > 0', name='check_positive_quantity'),
        Index('idx_trades_symbol_timestamp', 'symbol', 'entry_timestamp'),
        Index('idx_trades_status', 'status'),
        Index('idx_trades_strategy', 'strategy')
    )


class Signal(Base):
    """
    Trading signals generated by strategies before execution
    """

    __tablename__ = 'signals'

    # Primary key
    signal_id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))

    # Signal identification
    symbol = Column(String(20), nullable=False, index=True)
    strategy = Column(String(50), nullable=False)
    signal_source = Column(String(50), nullable=False)  # momentum, mean_reversion, ml_ensemble

    # Signal details
    direction = Column(String(10), nullable=False)  # BUY, SELL, HOLD
    strength = Column(Float, nullable=False)  # Signal strength (0.0 to 1.0)
    confidence = Column(Float, nullable=False)  # Signal confidence (0.0 to 1.0)

    # Price context
    current_price = Column(Float, nullable=False)
    predicted_target = Column(Float)
    predicted_stop_loss = Column(Float)
    risk_reward_ratio = Column(Float)

    # Technical context
    rsi_14 = Column(Float)
    macd_signal = Column(Float)
    bb_position = Column(Float)  # Bollinger Bands position
    volume_ratio = Column(Float)  # Volume vs average
    atr_14 = Column(Float)

    # Signal execution
    executed = Column(Boolean, default=False)
    execution_delay_seconds = Column(Integer)
    execution_slippage = Column(Float)

    # Market context
    market_regime = Column(String(20))  # trending, sideways, volatile
    market_sentiment = Column(String(20))  # bullish, bearish, neutral

    # Timestamps
    timestamp = Column(DateTime, nullable=False, default=func.now(), index=True)
    expiry_timestamp = Column(DateTime)  # When signal expires
    created_at = Column(DateTime, default=func.now())

    # Relationships
    trades = relationship("Trade", back_populates="signal")

    # Constraints and indexes
    __table_args__ = (
        CheckConstraint('direction IN (\'BUY\', \'SELL\', \'HOLD\')', name='check_signal_direction'),
        CheckConstraint('strength >= 0.0 AND strength <= 1.0', name='check_signal_strength'),
        CheckConstraint('confidence >= 0.0 AND confidence <= 1.0', name='check_signal_confidence'),
        Index('idx_signals_symbol_timestamp', 'symbol', 'timestamp'),
        Index('idx_signals_confidence', 'confidence'),
        Index('idx_signals_executed', 'executed')
    )


class Portfolio(Base):
    """
    Current portfolio state and positions
    """

    __tablename__ = 'portfolios'

    # Primary key
    portfolio_id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))

    # Portfolio identification
    name = Column(String(100), nullable=False, unique=True)
    portfolio_type = Column(String(20), nullable=False)  # PAPER, LIVE

    # Current state
    total_capital = Column(Float, nullable=False)
    available_capital = Column(Float, nullable=False)
    invested_capital = Column(Float, nullable=False)
    unrealized_pnl = Column(Float, default=0.0)
    realized_pnl = Column(Float, default=0.0)

    # Performance metrics
    total_return_pct = Column(Float, default=0.0)
    daily_return_pct = Column(Float, default=0.0)
    max_drawdown_pct = Column(Float, default=0.0)
    sharpe_ratio = Column(Float)

    # Risk metrics
    portfolio_beta = Column(Float)
    value_at_risk = Column(Float)  # VaR at 95% confidence
    current_leverage = Column(Float, default=1.0)

    # Trade statistics
    total_trades = Column(Integer, default=0)
    winning_trades = Column(Integer, default=0)
    losing_trades = Column(Integer, default=0)
    win_rate_pct = Column(Float, default=0.0)

    # Status
    is_active = Column(Boolean, default=True)
    last_trade_timestamp = Column(DateTime)

    # Timestamps
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())

    # Relationships
    snapshots = relationship("PortfolioSnapshot", back_populates="portfolio")


class PortfolioSnapshot(Base):
    """
    Daily portfolio snapshots for performance tracking
    """

    __tablename__ = 'portfolio_snapshots'

    # Primary key
    snapshot_id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))

    # Foreign key
    portfolio_id = Column(String(36), ForeignKey('portfolios.portfolio_id'), nullable=False)

    # Snapshot data
    snapshot_date = Column(DateTime, nullable=False, index=True)
    total_value = Column(Float, nullable=False)
    available_cash = Column(Float, nullable=False)
    invested_value = Column(Float, nullable=False)
    unrealized_pnl = Column(Float, default=0.0)

    # Daily performance
    daily_pnl = Column(Float, default=0.0)
    daily_return_pct = Column(Float, default=0.0)
    cumulative_return_pct = Column(Float, default=0.0)

    # Risk metrics
    daily_volatility = Column(Float)
    portfolio_beta = Column(Float)

    # Position counts
    long_positions = Column(Integer, default=0)
    short_positions = Column(Integer, default=0)
    total_positions = Column(Integer, default=0)

    # Market context
    market_benchmark_return = Column(Float)  # Nifty50 return for comparison

    # Timestamps
    created_at = Column(DateTime, default=func.now())

    # Relationships
    portfolio = relationship("Portfolio", back_populates="snapshots")

    # Constraints
    __table_args__ = (
        UniqueConstraint('portfolio_id', 'snapshot_date', name='unique_portfolio_snapshot'),
        Index('idx_snapshots_date', 'snapshot_date')
    )


class AlphaModelPrediction(Base):
    """
    ML model predictions for trading signals (SQLite compatible)
    """

    __tablename__ = 'alpha_predictions'

    # Primary key
    prediction_id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))

    # Prediction context
    symbol = Column(String(20), nullable=False, index=True)
    model_name = Column(String(50), nullable=False)  # alpha_model, lstm_intraday
    model_version = Column(String(20))

    # Features used (stored as JSON text string)
    features = Column(Text)  # JSON stored as text

    # Predictions
    predicted_direction = Column(String(10))  # BUY, SELL, HOLD
    probability_profitable = Column(Float)  # 0.0 to 1.0
    predicted_return_pct = Column(Float)
    predicted_holding_period = Column(Integer)  # Minutes

    # Confidence metrics
    model_confidence = Column(Float)  # 0.0 to 1.0
    feature_importance = Column(Text)  # JSON stored as text

    # Actual outcomes (filled after trade completion)
    actual_direction = Column(String(10))
    actual_return_pct = Column(Float)
    actual_holding_period = Column(Integer)
    prediction_accuracy = Column(Float)  # 0.0 to 1.0

    # Timestamps
    timestamp = Column(DateTime, nullable=False, default=func.now(), index=True)
    outcome_timestamp = Column(DateTime)  # When actual outcome was recorded
    created_at = Column(DateTime, default=func.now())

    # Helper methods for JSON handling
    def set_features(self, features_dict):
        """Set features as JSON string"""
        self.features = json.dumps(features_dict) if features_dict else None

    def get_features(self):
        """Get features as Python dict"""
        return json.loads(self.features) if self.features else {}

    def set_feature_importance(self, importance_dict):
        """Set feature importance as JSON string"""
        self.feature_importance = json.dumps(importance_dict) if importance_dict else None

    def get_feature_importance(self):
        """Get feature importance as Python dict"""
        return json.loads(self.feature_importance) if self.feature_importance else {}

    # Constraints and indexes
    __table_args__ = (
        Index('idx_predictions_symbol_timestamp', 'symbol', 'timestamp'),
        Index('idx_predictions_model', 'model_name'),
        Index('idx_predictions_confidence', 'model_confidence')
    )


class TechnicalIndicator(Base):
    """
    Technical indicators calculated for symbols
    """

    __tablename__ = 'technical_indicators'

    # Primary key
    indicator_id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))

    # Context
    symbol = Column(String(20), nullable=False, index=True)
    timeframe = Column(String(10), nullable=False)
    timestamp = Column(DateTime, nullable=False, index=True)

    # Trend indicators
    sma_20 = Column(Float)
    sma_50 = Column(Float)
    sma_200 = Column(Float)
    ema_12 = Column(Float)
    ema_26 = Column(Float)

    # Momentum indicators
    rsi_14 = Column(Float)
    macd = Column(Float)
    macd_signal = Column(Float)
    macd_histogram = Column(Float)

    # Volatility indicators
    bb_upper = Column(Float)
    bb_middle = Column(Float)
    bb_lower = Column(Float)
    bb_width = Column(Float)
    atr_14 = Column(Float)

    # Volume indicators
    volume_sma_20 = Column(Float)
    volume_ratio = Column(Float)  # Current volume vs average

    # Oscillators
    stoch_k = Column(Float)
    stoch_d = Column(Float)
    williams_r = Column(Float)

    # Market strength
    adx_14 = Column(Float)  # Trend strength

    # Custom indicators
    momentum_score = Column(Float)  # Combined momentum score
    trend_strength = Column(Float)  # Overall trend strength

    # Timestamps
    created_at = Column(DateTime, default=func.now())

    # Constraints
    __table_args__ = (
        UniqueConstraint('symbol', 'timeframe', 'timestamp', name='unique_technical_indicator'),
        Index('idx_technical_symbol_timestamp', 'symbol', 'timestamp')
    )


class RiskMetric(Base):
    """
    Risk management metrics and calculations
    """

    __tablename__ = 'risk_metrics'

    # Primary key
    metric_id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))

    # Context
    portfolio_id = Column(String(36), ForeignKey('portfolios.portfolio_id'))
    symbol = Column(String(20), index=True)  # Symbol-specific risk or NULL for portfolio
    timestamp = Column(DateTime, nullable=False, default=func.now(), index=True)

    # Risk calculations
    position_size_pct = Column(Float)  # Position size as % of portfolio
    kelly_criterion_pct = Column(Float)  # Optimal position size via Kelly
    value_at_risk = Column(Float)  # VaR at 95% confidence
    expected_shortfall = Column(Float)  # CVaR

    # Portfolio heat metrics
    portfolio_heat = Column(Float)  # Current portfolio risk level
    correlation_risk = Column(Float)  # Risk from correlated positions
    concentration_risk = Column(Float)  # Single position concentration risk

    # Drawdown tracking
    current_drawdown_pct = Column(Float)
    max_drawdown_pct = Column(Float)
    drawdown_duration_days = Column(Integer)

    # Risk limits
    max_position_size_pct = Column(Float, default=5.0)
    max_daily_loss_pct = Column(Float, default=2.0)
    max_total_positions = Column(Integer, default=6)

    # Compliance flags
    position_limit_breached = Column(Boolean, default=False)
    daily_loss_limit_breached = Column(Boolean, default=False)
    correlation_limit_breached = Column(Boolean, default=False)

    # Timestamps
    created_at = Column(DateTime, default=func.now())

    # Constraints
    __table_args__ = (
        Index('idx_risk_portfolio_timestamp', 'portfolio_id', 'timestamp'),
        Index('idx_risk_symbol', 'symbol')
    )


class SystemLog(Base):
    """
    System logging and audit trail (SQLite compatible)
    """

    __tablename__ = 'system_logs'

    log_id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))

    # Log details
    level = Column(String(10), nullable=False)  # INFO, WARNING, ERROR, CRITICAL
    module = Column(String(50), nullable=False)  # Which system module
    event_type = Column(String(50), nullable=False)  # trade_executed, signal_generated, etc.
    message = Column(Text, nullable=False)

    # Context data (JSON stored as text)
    context = Column(Text)  # JSON stored as text string

    # Error details if applicable
    error_code = Column(String(50))
    stack_trace = Column(Text)

    # Timestamp
    timestamp = Column(DateTime, nullable=False, default=func.now(), index=True)

    # Helper methods for JSON handling
    def set_context(self, context_dict):
        """Set context as JSON string"""
        self.context = json.dumps(context_dict) if context_dict else None

    def get_context(self):
        """Get context as Python dict"""
        return json.loads(self.context) if self.context else {}

    # Indexes
    __table_args__ = (
        Index('idx_logs_level_timestamp', 'level', 'timestamp'),
        Index('idx_logs_module', 'module'),
        Index('idx_logs_event_type', 'event_type')
    )


class ConfigParameter(Base):
    """
    System configuration parameters
    """

    __tablename__ = 'config_parameters'

    param_id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))

    # Parameter details
    category = Column(String(50), nullable=False)  # risk, trading, ml, etc.
    parameter_name = Column(String(100), nullable=False)
    parameter_value = Column(String(500), nullable=False)
    data_type = Column(String(20), nullable=False)  # string, float, int, bool
    description = Column(Text)

    # Versioning
    version = Column(Integer, default=1)
    is_active = Column(Boolean, default=True)

    # Timestamps
    created_at = Column(DateTime, default=func.now())
    updated_at = Column(DateTime, default=func.now(), onupdate=func.now())

    # Constraints
    __table_args__ = (
        UniqueConstraint('category', 'parameter_name', 'version', name='unique_config_param'),
        Index('idx_config_category', 'category'),
        Index('idx_config_active', 'is_active')
    )


# Export all models for easy importing
__all__ = [
    'Base',
    'MarketData',
    'Trade',
    'Signal',
    'Portfolio',
    'PortfolioSnapshot',
    'AlphaModelPrediction',
    'TechnicalIndicator',
    'RiskMetric',
    'SystemLog',
    'ConfigParameter'
]