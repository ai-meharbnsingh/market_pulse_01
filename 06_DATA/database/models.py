"""
MarketPulse Database Models - Fresh SQLite Compatible Version
No JSONB, no PostgreSQL imports, pure SQLite

Generated by fix_database_cache.py
"""

from datetime import datetime
from sqlalchemy import (
    Column, Integer, Float, String, DateTime, Boolean, 
    Text, ForeignKey, Index, UniqueConstraint, CheckConstraint
)
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from sqlalchemy.ext.declarative import declarative_base
import uuid
import json

# Create Base
Base = declarative_base()

class MarketData(Base):
    """Market data - OHLCV time series"""
    __tablename__ = 'market_data'

    id = Column(Integer, primary_key=True)
    symbol = Column(String(20), nullable=False, index=True)
    timestamp = Column(DateTime, nullable=False, index=True)
    timeframe = Column(String(10), nullable=False)

    open_price = Column(Float, nullable=False)
    high_price = Column(Float, nullable=False)
    low_price = Column(Float, nullable=False)
    close_price = Column(Float, nullable=False)
    volume = Column(Integer, nullable=False)

    data_source = Column(String(50), nullable=False)
    created_at = Column(DateTime, default=func.now())

    __table_args__ = (
        Index('idx_market_data_symbol_time', 'symbol', 'timestamp'),
        UniqueConstraint('symbol', 'timestamp', 'timeframe')
    )

class Portfolio(Base):
    """Portfolio management"""
    __tablename__ = 'portfolios'

    portfolio_id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    name = Column(String(100), nullable=False)
    portfolio_type = Column(String(20), nullable=False)

    total_capital = Column(Float, nullable=False)
    available_capital = Column(Float, nullable=False)
    invested_capital = Column(Float, nullable=False)
    unrealized_pnl = Column(Float, default=0.0)
    realized_pnl = Column(Float, default=0.0)

    total_trades = Column(Integer, default=0)
    winning_trades = Column(Integer, default=0)
    losing_trades = Column(Integer, default=0)

    created_at = Column(DateTime, default=func.now())

    snapshots = relationship("PortfolioSnapshot", back_populates="portfolio")

class Trade(Base):
    """Trade records"""
    __tablename__ = 'trades'

    trade_id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    symbol = Column(String(20), nullable=False, index=True)
    strategy = Column(String(50), nullable=False)

    action = Column(String(10), nullable=False)  # BUY, SELL
    quantity = Column(Integer, nullable=False)
    entry_price = Column(Float, nullable=False)
    exit_price = Column(Float)

    status = Column(String(20), nullable=False, default='ACTIVE')

    gross_pnl = Column(Float, default=0.0)
    commission = Column(Float, default=0.0)
    net_pnl = Column(Float, default=0.0)
    return_pct = Column(Float, default=0.0)

    entry_timestamp = Column(DateTime, nullable=False, default=func.now())
    exit_timestamp = Column(DateTime)
    created_at = Column(DateTime, default=func.now())

    __table_args__ = (
        CheckConstraint("action IN ('BUY', 'SELL')"),
        CheckConstraint("quantity > 0"),
        Index('idx_trades_symbol_time', 'symbol', 'entry_timestamp'),
    )

class Signal(Base):
    """Trading signals"""
    __tablename__ = 'signals'

    signal_id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    symbol = Column(String(20), nullable=False, index=True)
    strategy = Column(String(50), nullable=False)

    direction = Column(String(10), nullable=False)  # BUY, SELL, HOLD
    strength = Column(Float, nullable=False)
    confidence = Column(Float, nullable=False)

    current_price = Column(Float, nullable=False)
    predicted_target = Column(Float)
    predicted_stop_loss = Column(Float)

    executed = Column(Boolean, default=False)
    timestamp = Column(DateTime, nullable=False, default=func.now(), index=True)
    created_at = Column(DateTime, default=func.now())

    trades = relationship("Trade")

    __table_args__ = (
        CheckConstraint("direction IN ('BUY', 'SELL', 'HOLD')"),
        CheckConstraint("strength >= 0.0 AND strength <= 1.0"),
        CheckConstraint("confidence >= 0.0 AND confidence <= 1.0"),
    )

class PortfolioSnapshot(Base):
    """Daily portfolio snapshots"""
    __tablename__ = 'portfolio_snapshots'

    snapshot_id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    portfolio_id = Column(String(36), ForeignKey('portfolios.portfolio_id'))

    snapshot_date = Column(DateTime, nullable=False, index=True)
    total_value = Column(Float, nullable=False)
    available_cash = Column(Float, nullable=False)
    daily_pnl = Column(Float, default=0.0)
    daily_return_pct = Column(Float, default=0.0)

    created_at = Column(DateTime, default=func.now())

    portfolio = relationship("Portfolio", back_populates="snapshots")

    __table_args__ = (
        UniqueConstraint('portfolio_id', 'snapshot_date'),
    )

class AlphaModelPrediction(Base):
    """ML model predictions (SQLite compatible)"""
    __tablename__ = 'alpha_predictions'

    prediction_id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    symbol = Column(String(20), nullable=False, index=True)
    model_name = Column(String(50), nullable=False)

    # Store JSON as text strings
    features = Column(Text)  # JSON stored as text
    feature_importance = Column(Text)  # JSON stored as text

    predicted_direction = Column(String(10))
    probability_profitable = Column(Float)
    predicted_return_pct = Column(Float)
    model_confidence = Column(Float)

    actual_direction = Column(String(10))
    actual_return_pct = Column(Float)
    prediction_accuracy = Column(Float)

    timestamp = Column(DateTime, nullable=False, default=func.now(), index=True)
    created_at = Column(DateTime, default=func.now())

    def set_features(self, features_dict):
        """Store features as JSON string"""
        self.features = json.dumps(features_dict) if features_dict else None

    def get_features(self):
        """Get features as dict"""
        return json.loads(self.features) if self.features else {}

class TechnicalIndicator(Base):
    """Technical indicators"""
    __tablename__ = 'technical_indicators'

    indicator_id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    symbol = Column(String(20), nullable=False, index=True)
    timeframe = Column(String(10), nullable=False)
    timestamp = Column(DateTime, nullable=False, index=True)

    # Technical indicators
    rsi_14 = Column(Float)
    macd = Column(Float)
    macd_signal = Column(Float)
    sma_20 = Column(Float)
    sma_50 = Column(Float)
    bb_upper = Column(Float)
    bb_lower = Column(Float)
    atr_14 = Column(Float)
    volume_ratio = Column(Float)

    created_at = Column(DateTime, default=func.now())

    __table_args__ = (
        UniqueConstraint('symbol', 'timeframe', 'timestamp'),
    )

class SystemLog(Base):
    """System logs"""
    __tablename__ = 'system_logs'

    log_id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    level = Column(String(10), nullable=False)
    module = Column(String(50), nullable=False)
    event_type = Column(String(50), nullable=False)
    message = Column(Text, nullable=False)

    # Store JSON as text
    context = Column(Text)  # JSON as text

    timestamp = Column(DateTime, nullable=False, default=func.now(), index=True)

    def set_context(self, context_dict):
        """Store context as JSON string"""
        self.context = json.dumps(context_dict) if context_dict else None

    def get_context(self):
        """Get context as dict"""
        return json.loads(self.context) if self.context else {}

# Export all models
__all__ = [
    'Base', 'MarketData', 'Portfolio', 'Trade', 'Signal',
    'PortfolioSnapshot', 'AlphaModelPrediction', 'TechnicalIndicator', 'SystemLog'
]
